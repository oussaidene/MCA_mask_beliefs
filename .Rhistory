gradient.cols = c("#00AFBB", "blue", "red"),
repel = TRUE, # Avoid text overlapping (slow if many points)
ggtheme = theme_minimal())
# Illustration de la contribution absolue des individus
fviz_mca_ind(afcm, col.ind = "contrib",
gradient.cols = c("#00AFBB", "blue", "red"),
repel = TRUE, # Avoid text overlapping (slow if many points)
ggtheme = theme_minimal())
corrplot(afcm$var$contrib - 100*afcm$call$marge.col, is.corr=FALSE, method = 'color', tl.col="black", col = COL2('RdBu', 200) )
# Illustration des contribution relatives des modalités
corrplot(afcm$var$cos2, is.corr=FALSE, method = 'color', tl.col="black" )
data[62,]
data[42,]
data[29,]
data[6,]
data[52,]
data[31,]
data[3,]
afcm$call
sum(data$Reason == "To protect yourself" & data$InteractedElder == "No")
N = t(Z[, 12:16]) %*%  Z[, 17:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
library(tidyverse)
library("FactoMineR")
library("factoextra")
library("corrplot")
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
afc
afc$eig
plot(afc)
N = t(Z[, 12:18]) %*%  Z[, 12:18]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
summary(afc)
ca$plot()
afc$plot()
N = t(Z[, 17:18]) %*%  Z[, 12:16]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
summary(afc)
N = t(Z[, 17:18]) %*%  Z[, 12:16]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
Z2 = Z[, 12:16]
Z2
Z2 = Z[, 17:18]
Z2
Z2["sum"] = Z2["No"]
Z2
Z2$sum = Z2$No
Z2 = Z[, 17:18]
new <- data.frame(Z2)
new$sum = new$No
Z2
head (new)
new$sum = new$No + new$Yes
new
t(new)
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
Z2$sum = new$No + new$Yes
N = t(Z2) %*%  Z[, 12:16]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
Z2$` ` = new$No + new$Yes
N = t(Z2) %*%  Z[, 12:16]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
Z2 = Z[, 17:18]
N = t(Z2) %*%  Z[, 12:16]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
Z2 = Z[, 17:18]
N = t(Z2) %*%  Z[, 12:16]
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
afc$row$contrib
afc$row$coord
sum(data$Reason == "To protect yourself" & data$PreventSpread == "No")
sum(data$Boarding == "Boarding")
# ************************* #
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$sum = Z2$No + Z2$Yes
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
fviz_ca_col(afc)
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = Z2$No + Z2$Yes
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
afc$col$contrib
afc$col$coord
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = -Z2$No - Z2$Yes
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 17:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
# Tableau des valeurs propres
afc$eig
# Tableau des projections de profils lignes
afc$row$coord
# Tableau des projections de profils colonnes
afc$col$coord
# Tableau des contributions de profils lignes
afc$row$contrib
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = -Z2$No - Z2$Yes
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = Z2$No - Z2$Yes
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(-N)
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = Z2$No + Z2$Yes
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(-N)
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = (Z2$No + Z2$Yes)*0
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
afc$col$coord
afc$col$coord = -afc$col$coord
afc$col$coord
afc$row$coord = -afc$row$coord
afc$row$coord
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = (Z2$No + Z2$Yes)
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
afc$col$coord = -afc$col$coord
afc$col$coord
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = (Z2$No + Z2$Yes)*0
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
afc$col$coord
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = (Z2$No + Z2$Yes)
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
afc$col$coord = -afc$col$coord
afc$row$coord = -afc$row$coord
fviz_ca(afc)
fviz_ca(afc)ylim (3, 3)
fviz_ca(afc)ylim (-3, 3)
fviz_ca(afc)+ylim (-3, 3)
fviz_ca(afc) + ylim (-3, 3) +  xlim(-3, 1.5)
fviz_ca(afc) + ylim (-3, 3) +  xlim(-1, 1)
fviz_ca(afc) + ylim (-3, 3) +  xlim(-0.5, 0.5)
fviz_ca(afc) + ylim (-3, 3) +  xlim(-0.8, 0.5)
fviz_ca_biplot(afcm) + ylim (-3, 3) +  xlim(-0.8, 0.5)
fviz_ca_biplot(afc) + ylim (-3, 3) +  xlim(-0.8, 0.5)
fviz_ca_biplot(afc) + ylim (-3, 3) +  xlim(-1, 0.3)
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1, 0.3)
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1, 0.5)
3
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1, 0.3)
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1.5, 0.3)
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1.3, 0.3)
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1.4, 0.3)
fviz_ca(afc, repel = TRUE) + ylim (-3, 3) +  xlim(-1.5, 0.3)
library(tidyverse)
library("FactoMineR")
library("factoextra")
library("corrplot")
# na.strings=c("") : remplacer les chaines de caracteres vides avec NA
data <- read.csv("MaskBeliefs.csv", header = TRUE, na.strings=c(""))
# Suppression des colones qui ne representent pas des variables qualitatifs
data$Timestamp<- NULL
data$Age<- NULL
data$Restaurant <- NULL
# Affichage des noms de colonnes retenues
colnames(data)
# Affichage du nombre de valeurs manquantes
sum_na <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na))
# Suppression des NAs
data = na.omit(data)
# Reaffichage du nombre de valeurs manquantes pour verefication
sum_na_apres <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na_apres))
# Rendre le type des colonnes comme factor
data<- data %>%
mutate(Boarding = factor(Boarding),
Gender = factor(Gender),
ResidentialElder = factor(ResidentialElder),
InteractedElder = factor(InteractedElder),
PreventSpread = factor(PreventSpread),
Reason = factor(Reason),
Public = factor(Public))
# Tableau disjonctif complet de data
Z <- tab.disjonctif(data)
head(Z)
colnames(Z)
# Appliquer l'AFCM sur le tableau de donnée (data)
afcm <- MCA(data)
# Afficher le tableau des valeurs propres issue de notre AFCM
afcm$eig
summary(afcm)
library(explor)
install(explor)
install.packages("explor")
explor(afcm)
library(explor)
explor(afcm)
res <- explor::prepare_results(afcm)
explor::MCA_var_plot(res, xax = 1, yax = 2, var_sup = FALSE, var_sup_choice = ,
var_lab_min_contrib = 0, col_var = "Variable", symbol_var = NULL, size_var = NULL,
size_range = c(10, 300), labels_size = 9, point_size = 56, transitions = TRUE,
labels_positions = "auto", labels_prepend_var = TRUE, xlim = c(-1.91, 3.42),
ylim = c(-1.28, 4.05))
explor(afcm)
# Tableau de valeurs propres corrigé
p = ncol(data) # Le nombre de questions
# Correction des valeurs propres
eigs_corr = subset(afcm$eig, afcm$eig[,"eigenvalue"]> 1/p)
eigs_corr[,"eigenvalue"] = ((p/(p-1))*(eigs_corr[,"eigenvalue"] - (1/p)))**2
# Calcul de l'inertie des nouvelle valeur propore
eigs_corr[,"percentage of variance"] = (eigs_corr[,"eigenvalue"] / sum(eigs_corr[,"eigenvalue"]) * 100)
# Calcul de l'inertie cummulée
eigs_corr[1, "cumulative percentage of variance"] = eigs_corr[1, "percentage of variance"]
for(i in 2:nrow(eigs_corr)) {
eigs_corr[i, "cumulative percentage of variance"] = eigs_corr[i-1, "cumulative percentage of variance"] + eigs_corr[i, "percentage of variance"]
}
# Affichage de l'eboulie des valeurs propres corrigées
eig.val <- eigs_corr
barplot(eig.val[, 2],
names.arg = 1:nrow(eig.val),
main = "Variances Explained by Dimensions (%)",
xlab = "Principal Dimensions",
ylab = "Percentage of variances",
col ="steelblue")
# Add connected line segments to the plot
lines(x = 1:nrow(eig.val), eig.val[, 2],
type = "b", pch = 19, col = "red")
# Illustration des modalites dans ler plan factoriel
plot(afcm,
invisible = c("ind", "quali.sup", "quanti.sup"),
cex = 0.8,
autoLab = "yes")
# Illustration du biplot individus-modalites
fviz_mca_biplot(afcm, repel = TRUE,
ggtheme = theme_minimal())
# Afficher le tableau des projections des modalités issue de notre AFCM
afcm$var$coord
# Afficher le tableau des contributions issue de notre AFCM
afcm$var$contrib
# Afficher les poids des modalites
afcm$call$marge.col
# Afficher le tableau des contributions relatives des modalités issue de notre AFCM
afcm$var$cos2
# Illustration de la qualité de representation des modalités
fviz_mca_var(afcm, col.var = "cos2",
gradient.cols = c("#00AFBB", "blue", "red"),
repel = TRUE, # Avoid text overlapping
ggtheme = theme_minimal())
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 17:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
explor(afc)
summary(afc)
afc
explor(afc)
# Tableau des valeurs propres
afc$eig
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 16:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
explor(afc)
library(tidyverse)
library("FactoMineR")
library("factoextra")
library("corrplot")
# na.strings=c("") : remplacer les chaines de caracteres vides avec NA
data <- read.csv("MaskBeliefs.csv", header = TRUE, na.strings=c(""))
# Suppression des colones qui ne representent pas des variables qualitatifs
data$Timestamp<- NULL
data$Age<- NULL
data$Restaurant <- NULL
# Affichage des noms de colonnes retenues
colnames(data)
# Affichage du nombre de valeurs manquantes
sum_na <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na))
# Suppression des NAs
data = na.omit(data)
# Reaffichage du nombre de valeurs manquantes pour verefication
sum_na_apres <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na_apres))
# Rendre le type des colonnes comme factor
data<- data %>%
mutate(Boarding = factor(Boarding),
Gender = factor(Gender),
ResidentialElder = factor(ResidentialElder),
InteractedElder = factor(InteractedElder),
PreventSpread = factor(PreventSpread),
Reason = factor(Reason),
Public = factor(Public))
# Tableau disjonctif complet de data
Z <- tab.disjonctif(data)
head(Z)
colnames(Z)
# Appliquer l'AFCM sur le tableau de donnée (data)
afcm <- MCA(data)
# Afficher le tableau des valeurs propres issue de notre AFCM
afcm$eig
afcm
afcm$call
afcm
afcm$var
?MCA
?MCA$var
afcm
afcm$var$etat2
afcm$var$eta2
afcm$var$eta2[1:2]
afcm$var$eta2[,1:2]
# Afficher le tableau des rapports de corrélation des variables aux composantes principles issue de notre AFCM
afcm$var$eta2
library(tidyverse)
library("FactoMineR")
library("factoextra")
library("corrplot")
# na.strings=c("") : remplacer les chaines de caracteres vides avec NA
data <- read.csv("MaskBeliefs.csv", header = TRUE, na.strings=c(""))
# Suppression des colones qui ne representent pas des variables qualitatifs
data$Timestamp<- NULL
data$Age<- NULL
data$Restaurant <- NULL
# Affichage des noms de colonnes retenues
colnames(data)
# Affichage du nombre de valeurs manquantes
sum_na <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na))
# Suppression des NAs
data = na.omit(data)
# Reaffichage du nombre de valeurs manquantes pour verefication
sum_na_apres <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na_apres))
# Afficher le tableau des statistiques de la variable Boarding
Boardingstat <- fct_count(data$Boarding , prop = TRUE, sort = TRUE) %>%
rename("Boarding" = "f", "freq" = "p", "nb" = "n") %>%
mutate(freq = round(freq, 2))
# Rendre le type des colonnes comme factor
data<- data %>%
mutate(Boarding = factor(Boarding),
Gender = factor(Gender),
ResidentialElder = factor(ResidentialElder),
InteractedElder = factor(InteractedElder),
PreventSpread = factor(PreventSpread),
Reason = factor(Reason),
Public = factor(Public))
# Tableau disjonctif complet de data
Z <- tab.disjonctif(data)
head(Z)
colnames(Z)
# Appliquer l'AFCM sur le tableau de donnée (data)
afcm <- MCA(data)
afcm
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 17:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
afc
Z
head(Z)
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 3:5]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
afc
afcm
afcm$var$eta2
summary(afcm, nbelements = 2, ncp = 2, nb.dec = 2)
plot(afcm, choix="var")
afcm$var$eta2
summary(data)
Mini.ACM.MCA<-Mini.ACM[, c("Sexe", "Revenu", "Preference")]
dimdesc(afcm, axes=c(1, 2))
lol = dimdesc(afcm, axes=c(1, 2))
head(lol)
library(explor)
explor(afcm)
explor(afcm)
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 3:5]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
explor(afc)
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 17:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
explor(afc)
N
# Tableau de contingence entre la variable Public et Reason
N = t(Z[, 12:16]) %*%  Z[, 16:18]
N
# Application de l'AFC sur le tableau de contigence
afc <- CA(N)
explor(afc)
# ************************* #
# Représentation graphique de l'AFC
Z2 = Z[, 17:18]
Z2 <- data.frame(Z2)
# Comme la somme est lineairement depandante elle ne va pas influer les resultats
Z2$` ` = (Z2$No + Z2$Yes)
N =  t(Z[, 12:16]) %*% as.matrix(Z2)
# Application de l'AFC sur le nouveau tableau de contigence
afc <- CA(N)
explor(afc)
explor(afcm)
data[data$Reason == "To protect others but also because I'm required to",]
subset(data, Reason != "To protect others but also because I'm required to")
data[data$Reason == "To protect others but also because I'm required to",]
data
data[data$Reason == "To protect others but also because I'm required to",]
library(tidyverse)
library("FactoMineR")
library("factoextra")
library("corrplot")
# na.strings=c("") : remplacer les chaines de caracteres vides avec NA
data <- read.csv("MaskBeliefs.csv", header = TRUE, na.strings=c(""))
# Suppression des colones qui ne representent pas des variables qualitatifs
data$Timestamp<- NULL
data$Age<- NULL
data$Restaurant <- NULL
# Affichage des noms de colonnes retenues
colnames(data)
# Affichage du nombre de valeurs manquantes
sum_na <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na))
# Suppression des NAs
data = na.omit(data)
# Reaffichage du nombre de valeurs manquantes pour verefication
sum_na_apres <- sum(is.na(data))
print(paste("Le nombre des NAs dans notre dataset est :", sum_na_apres))
# Afficher le tableau des statistiques de la variable Boarding
Boardingstat <- fct_count(data$Boarding , prop = TRUE, sort = TRUE) %>%
rename("Boarding" = "f", "freq" = "p", "nb" = "n") %>%
mutate(freq = round(freq, 2))
Boardingstat
data[data$Reason == "To protect others but also because I'm required to",]
nrwo(data)
nrow(data)
explor(afcm)
res <- explor::prepare_results(afcm)
explor::MCA_ind_plot(res, xax = 1, yax = 2, ind_sup = FALSE, lab_var = NULL,
ind_lab_min_contrib = 0, col_var = "Public", labels_size = 9, point_opacity = 0.5,
opacity_var = NULL, point_size = 64, ellipses = FALSE, transitions = TRUE,
labels_positions = NULL, xlim = c(-1.1, 2.34), ylim = c(-1.26, 2.18))
explor(afcm)
